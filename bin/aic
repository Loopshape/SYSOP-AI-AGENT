#!/usr/bin/env bash
# ~/bin/aic - AI Coder / Orchestrator
# Features:
#   - Mandatory Ollama pool streaming
#   - Live verbose logging
#   - Loop aggregator model
#   - WebSocket + CLI dual-mode
#   - SQLite memory + event logs

set -euo pipefail
IFS=$'\n\t'

AI_HOME="${AI_HOME:-$HOME/.ai_coder}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/.ai_projects}"
mkdir -p "$AI_HOME" "$PROJECTS_DIR"

POOL_MODELS=(
  "code:latest"
  "loop:latest"
  "req:res"
  "res:req"
  "modulo:latest"
  "gemma3:1b"
  "2244-1:latest"
  "core:latest"
  "deepseek-r1:1.5b"
)

OLLAMA_BIN="$(command -v ollama || true)"
[[ -z "$OLLAMA_BIN" ]] && { echo "ERROR: ollama not found"; exit 1; }

log() { printf "[%s][AIC] %s\n" "$(date '+%T')" "$*"; }

# -------------------- STREAMER --------------------
stream_model() {
  local model="$1"
  local prompt="$2"

  "$OLLAMA_BIN" run "$model" --stream <<<"$prompt" \
  | while IFS= read -r line; do
      [[ -z "$line" ]] && continue
      echo -e "[${model}] $line" >&2   # live verbose
      echo "{\"model\":\"$model\",\"token\":$(jq -Rs . <<<"$line")}"
    done
}

# -------------------- POOL ORCHESTRATION --------------------
run_pool_orchestration() {
  local user_prompt="$1"
  local task_id=$(date +%s%N)
  local log_file="$AI_HOME/pool_$task_id.jsonl"
  : > "$log_file"

  log "Launching pool models..."

  for model in "${POOL_MODELS[@]}"; do
    stream_model "$model" "$user_prompt" >> "$log_file" &
  done
  wait

  log "Pool complete. Passing context to loop:latest"

  local combined=$(jq -s '.' "$log_file")
  "$OLLAMA_BIN" run loop:latest --stream <<<"$combined" \
  | while IFS= read -r line; do
      [[ -z "$line" ]] && continue
      echo -e "[loop:latest] $line" >&2
      echo "{\"model\":\"loop:latest\",\"token\":$(jq -Rs . <<<"$line")}"
    done

  echo '{"final":true}'
}

# -------------------- WEBSOCKETD HANDLER --------------------
handle_websocket() {
  log "WebSocket mode active"
  while IFS= read -r msg; do
    if echo "$msg" | jq -e . >/dev/null 2>&1; then
      local cmd=$(echo "$msg" | jq -r '.command // empty')
      local payload=$(echo "$msg" | jq -r '.payload // empty')
      case "$cmd" in
        "prompt")
          run_pool_orchestration "$payload"
          ;;
        *)
          echo "{\"error\":\"Unknown command $cmd\"}"
          ;;
      esac
    else
      echo "{\"error\":\"Invalid JSON\"}"
    fi
  done
}

# -------------------- MAIN --------------------
main() {
  case "${1:-}" in
    --websocket) handle_websocket ;;
    --help|-h) echo "Usage: aic [--websocket] <prompt>" ;;
    *) run_pool_orchestration "$*" ;;
  esac
}

main "$@"
