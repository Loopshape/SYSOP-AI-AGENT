#!/usr/bin/env bash
# aic - AI Orchestrator Controller
# Drop into ~/bin/aic and chmod +x it

set -euo pipefail

# === Colors ===
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'

# === Paths ===
BASE_DIR="$HOME/.aic"
DB_FILE="$BASE_DIR/memory.db"
PROJECTS_DIR="$BASE_DIR/projects"
mkdir -p "$BASE_DIR" "$PROJECTS_DIR"

# === Ollama pool ===
OLLAMA_POOL=("2244-1:latest" "core:latest" "code:latest" "modulo:latest" "gemma3:1b" "deepseek-r1:1.5b" "req:res" "res:req")

# === Helpers ===
log() { echo -e "${GREEN}[aic]${NC} $*"; }
err() { echo -e "${RED}[aic]${NC} $*" >&2; }

init_hash() {
  local input="$1"
  echo -n "$(date +%s)-$input" | sha1sum | cut -d' ' -f1
}

# === Project assembly ===
handle_project_input() {
  local mode="$1"
  local task_hash task_dir
  task_hash=$(init_hash "aic-$mode")
  task_dir="$PROJECTS_DIR/$task_hash"
  mkdir -p "$task_dir"

  case "$mode" in
    ".")
      find . -type f | while read -r f; do
        echo "----- FILE: $f -----" >> "$task_dir/input.txt"
        cat "$f" >> "$task_dir/input.txt"
        echo -e "\n" >> "$task_dir/input.txt"
      done
      ;;
    "*")
      for f in index.php index.html index.htm robots.txt; do
        [ -f "$f" ] && { echo "----- FILE: $f -----" >> "$task_dir/input.txt"; cat "$f" >> "$task_dir/input.txt"; }
      done
      ;;
    "+")
      find . -type f | while read -r f; do
        echo "----- FILE: $f -----" >> "$task_dir/input.txt"
        cat "$f" >> "$task_dir/input.txt"
        echo -e "\n" >> "$task_dir/input.txt"
      done
      ;;
  esac

  log "📁 Project snapshot stored: $task_dir/input.txt"
  orchestrate "$task_dir/input.txt" "$task_dir"
}

# === Run pool models ===
run_worker_pool() {
  local prompt="$1"
  local capture_file="$2"
  : > "$capture_file"

  for model in "${OLLAMA_POOL[@]}"; do
    (
      ollama run "$model" --stream <<< "$prompt" | \
        jq -R -c --arg model "$model" '{model:$model, token:.}' >> "$capture_file"
    ) &
  done
  wait
}

# === Aggregate final answer with loop ===
aggregate_final_answer() {
  local capture_file="$1"
  local final_file="$2"
  : > "$final_file"

  local pool_context
  pool_context=$(jq -r '.token' "$capture_file" | tr '\n' ' ')
  ollama run loop:latest --stream <<< "$pool_context" | tee "$final_file"
}

# === Orchestration ===
orchestrate() {
  local input_file="$1"
  local task_dir="$2"
  local capture_file="$task_dir/pool.json"
  local final_file="$task_dir/final.txt"

  run_worker_pool "$(cat "$input_file")" "$capture_file"
  aggregate_final_answer "$capture_file" "$final_file"

  log "✅ Final answer stored at: $final_file"
}

# === WebSocket Mode ===
handle_websocket_mode() {
  while read -r line; do
    if [[ -n "$line" ]]; then
      local tmpdir
      tmpdir=$(mktemp -d)
      echo "$line" > "$tmpdir/input.txt"
      run_worker_pool "$line" "$tmpdir/pool.json"
      aggregate_final_answer "$tmpdir/pool.json" "$tmpdir/final.txt"
      while read -r tok; do
        echo "{\"token\": \"$tok\"}"
      done < "$tmpdir/final.txt"
      echo '{"final": true}'
    fi
  done
}

# === Main CLI ===
case "${1:-}" in
  -h|--help)
    echo "Usage: aic [.|*|+|-w|-s] [args]"
    echo "  .   Assemble current dir into project"
    echo "  *   Assemble entrypoint files (index, robots.txt)"
    echo "  +   Assemble all files recursively"
    echo "  -w  WebSocket mode (for websocketd on :8181)"
    echo "  -s  Serve via HTTP (python3 -m http.server 8080)"
    exit 0
    ;;
  ".") handle_project_input "." ;;
  "*") handle_project_input "*" ;;
  "+") handle_project_input "+" ;;
  -w) handle_websocket_mode ;;
  -s) python3 -m http.server 8080 --bind 127.0.0.1 ;;
  *)
    if [[ $# -gt 0 ]]; then
      # Direct prompt mode
      local tmpdir
      tmpdir=$(mktemp -d)
      echo "$*" > "$tmpdir/input.txt"
      orchestrate "$tmpdir/input.txt" "$tmpdir"
      cat "$tmpdir/final.txt"
    else
      err "No input provided. Use -h for help."
      exit 1
    fi
    ;;
esac
