#!/usr/bin/env bash
# AI Command Runner - Bulletproof Edition
set -euo pipefail
IFS=$'\n\t'

# --- BULLETPROOF CONFIGURATION ---
SCRIPT_NAME="aic"
SCRIPT_VERSION="1.0.0"
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
LOG_FILE="$AI_HOME/aic.log"

# Define all required variables with safe defaults
PREFIX="${PREFIX:-}"
AI_SCRIPT="${AI_SCRIPT:-$HOME/bin/ai}"
API_URL="${API_URL:-http://localhost:8080}"

# --- VERBOSE LOGGING ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; CYAN='\033[0;36m'; NC='\033[0m'

log() { printf "${BLUE}[%s]${NC} %s\\n" "$(date '+%T')" "$*" >&2; }
log_success() { log "${GREEN}$*${NC}"; }
log_warn() { log "${YELLOW}WARN: $*${NC}"; }
log_error() { log "${RED}ERROR: $*${NC}"; return 1; }
log_debug() { [[ "${DEBUG:-}" == "1" ]] && log "${CYAN}DEBUG: $*${NC}"; }

# --- ERROR HANDLING ---
trap 'cleanup_on_exit' EXIT INT TERM

cleanup_on_exit() {
    local exit_code=$?
    log_debug "Cleanup initiated with exit code: $exit_code"
    exit $exit_code
}

# --- VALIDATION FUNCTIONS ---
validate_environment() {
    log_debug "Validating environment..."
    
    # Check if AI script exists
    if [[ ! -f "$AI_SCRIPT" ]]; then
        log_error "AI script not found: $AI_SCRIPT"
        log "Install it with: curl -s https://raw.githubusercontent.com/your-repo/ai/main/ai.sh > $AI_SCRIPT && chmod +x $AI_SCRIPT"
        return 1
    fi
    
    # Check if AI script is executable
    if [[ ! -x "$AI_SCRIPT" ]]; then
        log_error "AI script not executable: $AI_SCRIPT"
        log "Make executable with: chmod +x $AI_SCRIPT"
        return 1
    fi
    
    log_success "Environment validation passed"
    return 0
}

check_api_server() {
    log_debug "Checking API server status..."
    
    if curl -s "$API_URL/status" > /dev/null 2>&1; then
        log_debug "API server is running"
        return 0
    else
        log_warn "API server not responding at $API_URL"
        return 1
    fi
}

# --- MAIN EXECUTION FUNCTIONS ---
run_local_ai() {
    local prompt="$*"
    log "Running local AI with prompt: ${prompt:0:100}..."
    
    if ! validate_environment; then
        log_error "Environment validation failed"
        return 1
    fi
    
    # Execute the AI script
    if "$AI_SCRIPT" "$prompt"; then
        log_success "AI execution completed"
        return 0
    else
        local exit_code=$?
        log_error "AI execution failed with exit code: $exit_code"
        return $exit_code
    fi
}

run_api_ai() {
    local prompt="$*"
    log "Sending to API server: ${prompt:0:100}..."
    
    if ! check_api_server; then
        log_warn "Falling back to local execution"
        run_local_ai "$prompt"
        return $?
    fi
    
    local response
    if response=$(curl -s -X POST "$API_URL/prompt" \
        -H "Content-Type: application/json" \
        -d "{\"prompt\": \"$prompt\"}" 2>/dev/null); then
        
        if echo "$response" | grep -q '"error"'; then
            local error_msg=$(echo "$response" | grep '"error"' | sed 's/.*"error":"\([^"]*\)".*/\1/')
            log_error "API error: $error_msg"
            return 1
        else
            echo "$response"
            log_success "API request completed"
            return 0
        fi
    else
        log_error "API request failed"
        return 1
    fi
}

# --- COMMAND DISPATCHER ---
show_help() {
    cat << EOF
${GREEN}$SCRIPT_NAME v$SCRIPT_VERSION - AI Command Runner${NC}

${CYAN}Usage:${NC}
  aic [OPTIONS] "<your prompt>"      - Run AI with prompt
  aic --local "<prompt>"             - Force local execution only
  aic --api "<prompt>"               - Force API execution only
  aic --status                       - Check system status
  aic --debug "<prompt>"             - Enable debug mode
  aic --help                         - Show this help

${CYAN}Examples:${NC}
  aic "Create a Python web server"
  aic --local "Debug this script"
  aic --api "Analyze system performance"
  aic --debug "Check server status"

${CYAN}Configuration:${NC}
  AI_SCRIPT: $AI_SCRIPT
  API_URL: $API_URL
  AI_HOME: $AI_HOME
EOF
}

check_system_status() {
    log "System Status Check:"
    
    # Check AI script
    if [[ -f "$AI_SCRIPT" ]]; then
        if [[ -x "$AI_SCRIPT" ]]; then
            log_success "✓ AI script: $AI_SCRIPT (executable)"
        else
            log_warn "✗ AI script: $AI_SCRIPT (not executable)"
        fi
    else
        log_error "✗ AI script: $AI_SCRIPT (not found)"
    fi
    
    # Check API server
    if check_api_server; then
        log_success "✓ API server: $API_URL (running)"
    else
        log_warn "✗ API server: $API_URL (not responding)"
    fi
    
    # Check dependencies
    local deps=("curl" "jq" "sqlite3")
    for dep in "${deps[@]}"; do
        if command -v "$dep" &> /dev/null; then
            log_success "✓ Dependency: $dep"
        else
            log_warn "✗ Dependency: $dep (not found)"
        fi
    done
}

main() {
    local start_time=$(date +%s)
    log_debug "Script started: $SCRIPT_NAME v$SCRIPT_VERSION"
    
    # Ensure log directory exists
    mkdir -p "$(dirname "$LOG_FILE")"
    
    case "${1:-}" in
        "--help"|"-h")
            show_help
            ;;
            
        "--status")
            check_system_status
            ;;
            
        "--local")
            shift
            run_local_ai "$@"
            ;;
            
        "--api")
            shift
            run_api_ai "$@"
            ;;
            
        "--debug")
            DEBUG=1
            shift
            log_debug "Debug mode enabled"
            run_local_ai "$@"
            ;;
            
        "")
            log_error "No prompt provided"
            show_help
            return 1
            ;;
            
        *)
            # Auto-detect: try API first, fallback to local
            if check_api_server; then
                run_api_ai "$@"
            else
                run_local_ai "$@"
            fi
            ;;
    esac
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    log_debug "Execution completed in ${duration}s"
}

# --- ENTRY POINT ---
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Add safety check for required variables
    : "${PREFIX:=}"  # Ensure PREFIX is set, even if empty
    
    if main "$@"; then
        exit 0
    else
        exit 1
    fi
fi