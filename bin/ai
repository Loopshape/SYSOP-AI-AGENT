#!/usr/bin/env bash
# dex - AI DevOps Agent v16.1 - Singlefile CLI + WS Monokai Dashboard

set -euo pipefail
IFS=$'\n\t'

AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"
OLLAMA_BIN="$(command -v ollama || true)"
MEMORY_DB="$AI_HOME/memory.db"
CONFIG_DB="$AI_HOME/config.db"
WS_PORT="${WS_PORT:-8081}"
DEFAULT_MODEL="gemma3:1b"
AGENT_MODEL="${AI_MODEL:-$DEFAULT_MODEL}"

mkdir -p "$AI_HOME" "$PROJECTS_DIR"

# --- COLORS & LOGGING ---
log() { echo -e "[\033[36mINFO\033[0m] $*"; }
log_warn() { echo -e "[\033[33mWARN\033[0m] $*"; }
log_error() { echo -e "[\033[31mERROR\033[0m] $*"; exit 1; }
log_success() { echo -e "[\033[32mOK\033[0m] $*"; }

# --- DATABASE ---
sqlite_escape() { echo "$1" | sed "s/'/''/g"; }
init_db() {
  sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    prompt TEXT,
    response TEXT,
    file_path TEXT
  );" 2>/dev/null || true
}
add_to_memory() {
  sqlite3 "$MEMORY_DB" "INSERT INTO memories (prompt,response,file_path)
    VALUES ('$(sqlite_escape "$1")','$(sqlite_escape "$2")','$(sqlite_escape "$3")');"
}

# --- TOOLING ---
write_file() {
  local path="$1"; local content="$2"
  mkdir -p "$(dirname "$path")"
  echo -e "$content" > "$path"
  log_success "Code written to $path"
}
lint_beautify() {
  local path="$1"; local ext="${path##*.}"
  if command -v prettier >/dev/null && [[ "$ext" == js || "$ext" == ts ]]; then
    prettier --write "$path" >/dev/null 2>&1
  elif command -v black >/dev/null && [[ "$ext" == py ]]; then
    black "$path" >/dev/null 2>&1
  fi
}

# --- AI WORKER ---
ensure_ollama() {
  if ! pgrep -f "ollama serve" >/dev/null; then
    log "Starting Ollama server..."
    nohup "$OLLAMA_BIN" serve >"$AI_HOME/ollama.log" 2>&1 &
    sleep 5
  fi
}

run_ai() {
  ensure_ollama
  local prompt="$1"
  local fifo; fifo=$(mktemp -u)
  mkfifo "$fifo"

  local response=""
  (ollama run "$AGENT_MODEL" "$prompt" > "$fifo" 2>&1) &
  local pid=$!

  while IFS= read -r line < "$fifo"; do
    response+="$line"$'\n'
    echo -e "[\033[36mAI\033[0m] $line"
    if [[ -n "${WS_ACTIVE:-}" ]]; then
      echo "$line" >> "$AI_HOME/ws_fifo"
    fi
  done

  wait "$pid"
  rm -f "$fifo"
  echo "$response"
}

# --- TRIUMVIRATE WORKFLOW ---
run_triumvirate() {
  local prompt="$*"
  local task_dir="$PROJECTS_DIR/$(date +%s%N)"
  mkdir -p "$task_dir"

  log "Running AI worker..."
  local code; code=$(run_ai "$prompt")

  local lang="js"
  [[ "$code" == *"def "* ]] && lang="py"
  local file_path="$task_dir/main.$lang"
  write_file "$file_path" "$code"
  lint_beautify "$file_path"

  add_to_memory "$prompt" "$code" "$file_path"
}

# --- WEBSOCKET DASHBOARD ---
start_ws() {
  WS_ACTIVE=1
  rm -f "$AI_HOME/ws_fifo"
  mkfifo "$AI_HOME/ws_fifo"

  # HTML dashboard served by websocketd
  DASHBOARD_HTML="$AI_HOME/index.html"
  cat > "$DASHBOARD_HTML" << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Dex AI Dashboard</title>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@11.8.0/styles/monokai-sublime.min.css">
<script src="https://cdn.jsdelivr.net/npm/highlight.js@11.8.0/lib/highlight.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function() {
  const logDiv = document.getElementById("log");
  const evtSource = new EventSource("/ws");
  evtSource.onmessage = function(e) {
    const pre = document.createElement("pre");
    pre.innerHTML = e.data.replace(/</g,"&lt;").replace(/>/g,"&gt;");
    pre.className = "hljs javascript";
    hljs.highlightElement(pre);
    logDiv.appendChild(pre);
    logDiv.scrollTop = logDiv.scrollHeight;
  };
});
</script>
<style>
body { background:#272822; color:#f8f8f2; font-family: monospace; padding: 10px; }
pre.hljs { background:#272822; padding:8px; border-radius:5px; }
#log { height:90vh; overflow-y:auto; }
</style>
</head>
<body>
<h2>Dex AI Dashboard - Monokai Dark</h2>
<div id="log"></div>
</body>
</html>
EOF

  log "Starting websocketd server on port $WS_PORT"
  websocketd --port="$WS_PORT" --devconsole --staticdir="$AI_HOME" cat "$AI_HOME/ws_fifo" &
  log_success "Open browser: http://localhost:$WS_PORT"
}

# --- MAIN ---
init_db

if [[ $# -eq 0 ]]; then
  log_error "CLI mandatory. Usage: dex \"task description\" or dex serve-ws"
fi

case "$1" in
  serve-ws)
    start_ws
    ;;
  --setup)
    log "Installing dependencies..."
    sudo apt update && sudo apt install -y sqlite3 jq curl tree lynx
    log_success "Setup complete."
    ;;
  *)
    run_triumvirate "$*"
    ;;
esac
