#!/usr/bin/env bash
# AI DevOps Platform v14.0 - The Ultimate Monolith
# Single-file: Web UI + AGI Workflows + GitOps + Memory System

set -euo pipefail
IFS=$'\n\t'

# --- RUNTIME MODE DETECTION ---
if [[ "${1:-}" == "serve" ]]; then
    # Web Server Mode - Embedded Node.js
    exec node --input-type=module - <<'NODE_EOF'
import http from 'http';
import { exec } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const PORT = process.env.AI_PORT || 8080;

// Embedded HTML5 Web UI
const HTML_UI = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI DevOps Platform v14.0</title>
    <style>
        :root {
            --bg: #0f0f23; --text: #00ff00; --accent: #ff6ec7; --secondary: #6a67ce;
            --success: #00ff88; --warning: #ffaa00; --error: #ff4444; --panel: #1a1a2e;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Courier New', monospace; 
            background: var(--bg); 
            color: var(--text);
            line-height: 1.6;
            overflow-x: hidden;
        }
        .terminal {
            background: #000;
            border: 2px solid var(--accent);
            border-radius: 10px;
            padding: 20px;
            margin: 20px;
            height: 70vh;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
        }
        .input-line { 
            display: flex; 
            margin-top: 10px;
            border-top: 1px solid var(--secondary);
            padding-top: 10px;
        }
        .prompt { color: var(--accent); margin-right: 10px; }
        input { 
            flex: 1; 
            background: transparent; 
            border: none; 
            color: var(--text);
            font-family: inherit;
            font-size: inherit;
            outline: none;
        }
        .output { white-space: pre-wrap; }
        .success { color: var(--success); }
        .error { color: var(--error); }
        .warning { color: var(--warning); }
        .info { color: var(--secondary); }
    </style>
</head>
<body>
    <div style="text-align: center; padding: 20px; border-bottom: 2px solid var(--accent);">
        <h1>🤖 AI DevOps Platform v14.0</h1>
        <p>Full-stack AI agent with web interface</p>
    </div>
    
    <div class="terminal">
        <div id="output" class="output">
            <div class="info">🚀 AI Agent ready. Type commands below...</div>
        </div>
        <div class="input-line">
            <span class="prompt">ai&gt;</span>
            <input type="text" id="commandInput" placeholder="Enter AI command...">
        </div>
    </div>

    <script>
        const output = document.getElementById('output');
        const input = document.getElementById('commandInput');
        
        function addOutput(text, className = '') {
            const div = document.createElement('div');
            div.className = className;
            div.textContent = text;
            output.appendChild(div);
            output.scrollTop = output.scrollHeight;
        }

        async function executeCommand(cmd) {
            addOutput(`ai> ${cmd}`, 'prompt');
            
            try {
                const response = await fetch('/api/command', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ command: cmd })
                });
                
                const data = await response.json();
                addOutput(data.output, data.success ? 'success' : 'error');
            } catch (err) {
                addOutput(`Error: ${err.message}`, 'error');
            }
        }

        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const cmd = input.value.trim();
                if (cmd) {
                    executeCommand(cmd);
                    input.value = '';
                }
            }
        });

        input.focus();
    </script>
</body>
</html>
`;

const server = http.createServer(async (req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    if (req.url === '/' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(HTML_UI);
        return;
    }

    if (req.url === '/api/command' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => body += chunk.toString());
        req.on('end', () => {
            try {
                const { command } = JSON.parse(body);
                
                // Execute the AI command
                exec(`"${process.argv[1]}" ${command}`, (error, stdout, stderr) => {
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    if (error) {
                        res.end(JSON.stringify({ 
                            success: false, 
                            output: `Error: ${error.message}\n${stderr}` 
                        }));
                    } else {
                        res.end(JSON.stringify({ 
                            success: true, 
                            output: stdout || 'Command executed successfully' 
                        }));
                    }
                });
            } catch (err) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, output: 'Invalid request' }));
            }
        });
        return;
    }

    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ error: 'Not found' }));
});

server.listen(PORT, () => {
    console.log(`🌐 AI Web UI: http://localhost:${PORT}`);
    console.log(`💻 CLI Mode: ./ai.sh "your command"`);
    console.log(`📚 API Mode: curl -X POST http://localhost:${PORT}/api/command -d '{"command":"help"}'`);
});
NODE_EOF
fi

# --- BASH AGENT CORE (v14.0) ---

# --- CONFIGURATION ---
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"
SSH_DIR="$HOME/.ssh"
GIT_SSH_KEY="$SSH_DIR/id_ai_agent"
LOG_FILE="$AI_HOME/ai.log"

# AI Models with fallbacks
DEFAULT_MODEL="llama3.1:8b"
DEFAULT_AGENT_MODEL="${DEFAULT_AGENT_MODEL:-$DEFAULT_MODEL}"
DEFAULT_REVIEWER_MODEL="${DEFAULT_REVIEWER_MODEL:-$DEFAULT_MODEL}"
DEFAULT_TESTER_MODEL="${DEFAULT_TESTER_MODEL:-$DEFAULT_MODEL}"

# Runtime config
AGENT_MODEL=""
REVIEWER_MODEL=""
TESTER_MODEL=""
OLLAMA_BIN="$(command -v ollama || echo 'ollama')"
MEMORY_DB="$AI_HOME/memory.db"
CONFIG_DB="$AI_HOME/config.db"
MAX_AGENT_LOOPS=5

# --- ENHANCED COLOR SYSTEM ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'
ORANGE='\033[0;33m'; MAGENTA='\033[0;35m'; NC='\033[0m'

# Unicode icons
ICON_AI="🤖"; ICON_CODE="💻"; ICON_TEST="🧪"; ICON_GIT="📚"
ICON_SUCCESS="✅"; ICON_WARN="⚠️"; ICON_ERROR="❌"; ICON_INFO="ℹ️"

# --- ADVANCED LOGGING SYSTEM ---
LOG_LEVEL="${LOG_LEVEL:-INFO}"

log() { 
    local level="$1" color="$2" icon="$3" message="$4"
    if [[ "$LOG_LEVEL" == "DEBUG" ]] || [[ "$level" != "DEBUG" && "$LOG_LEVEL" != "SILENT" ]]; then
        printf "${color}${icon} [%s] %s${NC}\\n" "$(date '+%T')" "$message" >&2
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message" >> "$LOG_FILE"
    fi
}

log_debug() { log "DEBUG" "$PURPLE" "🔍" "$*"; }
log_info() { log "INFO" "$BLUE" "$ICON_INFO" "$*"; }
log_success() { log "SUCCESS" "$GREEN" "$ICON_SUCCESS" "$*"; }
log_warn() { log "WARN" "$YELLOW" "$ICON_WARN" "$*"; }
log_error() { log "ERROR" "$RED" "$ICON_ERROR" "$*"; }

log_phase() {
    local phase="$1"
    echo -e "\\n${MAGENTA}╔══════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║ 🚀 $phase${NC}"
    echo -e "${MAGENTA}╚══════════════════════════════════════════════════════════════════╝${NC}"
}

log_ai_think() { log "THINK" "$CYAN" "🧠" "$*"; }
log_ai_code() { log "CODE" "$GREEN" "$ICON_CODE" "$*"; }
log_ai_test() { log "TEST" "$YELLOW" "$ICON_TEST" "$*"; }

# --- INITIALIZATION ---
init_environment() {
    mkdir -p "$AI_HOME" "$PROJECTS_DIR" "$SSH_DIR"
    chmod 700 "$SSH_DIR" 2>/dev/null || true
    
    # Create log file
    touch "$LOG_FILE"
    chmod 600 "$LOG_FILE"
    
    log_success "Environment initialized: $AI_HOME"
}

# --- DATABASE SYSTEM ---
init_db() {
    sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        prompt TEXT,
        project TEXT,
        language TEXT,
        code TEXT,
        review TEXT,
        tests TEXT,
        status TEXT,
        hash TEXT UNIQUE
    );" 2>/dev/null || true

    sqlite3 "$CONFIG_DB" "CREATE TABLE IF NOT EXISTS config (
        key TEXT PRIMARY KEY,
        value TEXT,
        updated DATETIME DEFAULT CURRENT_TIMESTAMP
    );" 2>/dev/null || true
    
    log_debug "Databases initialized"
}

sqlite_escape() {
    echo "$1" | sed "s/'/''/g"
}

# --- CONFIG MANAGEMENT ---
set_config() {
    local key="$1" value="$2"
    sqlite3 "$CONFIG_DB" "INSERT OR REPLACE INTO config (key, value) VALUES ('$key', '$(sqlite_escape "$value")');"
    log_success "Config set: $key = $value"
}

get_config() {
    sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key = '$1';" 2>/dev/null
}

load_config() {
    AGENT_MODEL=$(get_config agent_model || echo "$DEFAULT_AGENT_MODEL")
    REVIEWER_MODEL=$(get_config reviewer_model || echo "$DEFAULT_REVIEWER_MODEL")
    TESTER_MODEL=$(get_config tester_model || echo "$DEFAULT_TESTER_MODEL")
    
    log_info "Models loaded: Agent=$AGENT_MODEL, Reviewer=$REVIEWER_MODEL, Tester=$TESTER_MODEL"
}

# --- MEMORY SYSTEM ---
add_memory() {
    local prompt="$1" project="$2" language="$3" code="$4" review="$5" tests="$6" status="$7"
    local hash=$(echo -n "$prompt$project" | sha256sum | cut -c1-16)
    
    sqlite3 "$MEMORY_DB" "INSERT OR REPLACE INTO memories 
        (prompt, project, language, code, review, tests, status, hash) 
        VALUES (
            '$(sqlite_escape "$prompt")',
            '$(sqlite_escape "$project")',
            '$language',
            '$(sqlite_escape "$code")',
            '$(sqlite_escape "$review")',
            '$(sqlite_escape "$tests")',
            '$status',
            '$hash'
        );" 2>/dev/null
    
    log_debug "Memory stored: $project ($status)"
}

search_memory() {
    local query="$1"
    sqlite3 -header -column "$MEMORY_DB" \
        "SELECT timestamp, prompt, project, language, status 
         FROM memories 
         WHERE prompt LIKE '%$(sqlite_escape "$query")%' 
            OR project LIKE '%$(sqlite_escape "$query")%'
         ORDER BY timestamp DESC 
         LIMIT 10;" 2>/dev/null || echo "No memories found"
}

# --- SSH & GIT INTEGRATION ---
setup_ssh_key() {
    local key_content="$1"
    
    # Validate SSH key format
    if [[ ! "$key_content" =~ ^ssh- ]]; then
        log_error "Invalid SSH key format"
        return 1
    fi
    
    echo "$key_content" > "$GIT_SSH_KEY"
    chmod 600 "$GIT_SSH_KEY"
    
    # Create comprehensive SSH config
    cat > "$SSH_DIR/config" << EOF
Host *
    IdentityFile $GIT_SSH_KEY
    IdentitiesOnly yes
    ServerAliveInterval 60
    TCPKeepAlive yes

Host github.com
    HostName github.com
    User git

Host gitlab.com
    HostName gitlab.com
    User git

Host bitbucket.org
    HostName bitbucket.org
    User git
EOF

    chmod 600 "$SSH_DIR/config"
    log_success "SSH key configured: $GIT_SSH_KEY"
}

test_ssh() {
    log_info "Testing SSH connection to GitHub..."
    if ssh -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no git@github.com 2>&1 | grep -q "successfully authenticated"; then
        log_success "SSH authentication working"
        return 0
    else
        log_warn "SSH test inconclusive - this is normal for GitHub"
        return 0
    fi
}

git_operation() {
    local op="$1" repo_path="${2:-.}" branch="${3:-}"
    
    if [[ ! -d "$repo_path/.git" ]]; then
        log_error "Not a git repository: $repo_path"
        return 1
    fi
    
    if ! cd "$repo_path" 2>/dev/null; then
        log_error "Cannot access directory: $repo_path"
        return 1
    fi
    
    local repo_name=$(basename "$(git rev-parse --show-toplevel 2>/dev/null || echo "$repo_path")")
    
    log_phase "Git $op: $repo_name"
    
    case "$op" in
        status)
            echo "Repository: $repo_name"
            echo "Branch: $(git branch --show-current 2>/dev/null || echo 'detached')"
            echo "Remote: $(git remote get-url origin 2>/dev/null || echo 'none')"
            echo ""
            git status
            echo ""
            echo "Recent commits:"
            git log --oneline -5 2>/dev/null || echo "No commits yet"
            ;;
            
        pull)
            local current_branch=$(git branch --show-current)
            local target_branch="${branch:-$current_branch}"
            log_info "Pulling $target_branch from origin"
            GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git pull origin "$target_branch"
            ;;
            
        push)
            if git diff --quiet && git diff --cached --quiet; then
                log_warn "No changes to push"
                return 0
            fi
            
            echo "Changes to be pushed:"
            git status --short
            echo ""
            
            local commit_msg
            if [[ -n "${4:-}" ]]; then
                commit_msg="$4"
            else
                read -p "Commit message: " commit_msg
            fi
            
            [[ -z "$commit_msg" ]] && commit_msg="AI commit: $(date '+%Y-%m-%d %H:%M:%S')"
            
            git add .
            git commit -m "$commit_msg"
            GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git push origin "$(git branch --show-current)"
            ;;
            
        sync)
            git_operation "pull" "$repo_path" "$branch"
            git_operation "push" "$repo_path" "$branch" "${4:-}"
            ;;
            
        clone)
            local target_dir="${4:-}"
            if [[ -z "$target_dir" ]]; then
                target_dir=$(basename "$repo_path" .git)
            fi
            
            log_info "Cloning $repo_path to $target_dir"
            GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git clone "$repo_path" "$target_dir"
            ;;
            
        log)
            git log --oneline -10 --graph --decorate
            ;;
            
        *)
            log_error "Unknown git operation: $op"
            echo "Available operations: status, pull, push, sync, clone, log"
            return 1
            ;;
    esac
}

# --- AI MODEL MANAGEMENT ---
ensure_ollama() {
    if ! command -v ollama >/dev/null 2>&1; then
        log_error "Ollama not found. Please install from https://ollama.ai"
        return 1
    fi
    
    # Check if Ollama server is running
    if ! curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
        log_info "Starting Ollama server..."
        nohup ollama serve >/dev/null 2>&1 &
        local pid=$!
        
        # Wait for server to start
        for i in {1..30}; do
            if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
                log_success "Ollama server started"
                return 0
            fi
            sleep 1
        done
        
        log_error "Ollama server failed to start"
        kill $pid 2>/dev/null || true
        return 1
    fi
    
    return 0
}

ensure_model() {
    local model="$1"
    
    if ! ensure_ollama; then
        return 1
    fi
    
    # Check if model exists
    if ollama list | grep -q "$model"; then
        log_debug "Model available: $model"
        return 0
    fi
    
    log_info "Downloading model: $model"
    if ollama pull "$model"; then
        log_success "Model downloaded: $model"
        return 0
    else
        log_error "Failed to download model: $model"
        return 1
    fi
}

run_ai_model() {
    local model="$1" prompt="$2" system="${3:-}"
    
    if ! ensure_model "$model"; then
        log_error "Cannot use model: $model"
        return 1
    fi
    
    local full_prompt="$prompt"
    if [[ -n "$system" ]]; then
        full_prompt="System: $system\n\nUser: $prompt"
    fi
    
    log_ai_think "Querying $model..."
    
    local response
    if response=$(ollama run "$model" "$full_prompt" --temperature 0.3 --top-p 0.9 2>/dev/null); then
        echo "$response"
        return 0
    else
        log_error "AI model execution failed"
        return 1
    fi
}

# --- PROJECT ANALYSIS ---
detect_language() {
    local prompt="$1"
    case "$prompt" in
        *python*|*py*|*import*|*def*|*flask*|*django*|*pandas*|*numpy*) echo "python" ;;
        *javascript*|*js*|*node*|*react*|*vue*|*express*|*npm*) echo "javascript" ;;
        *bash*|*shell*|*sh*|*#!/bin*|*zsh*) echo "bash" ;;
        *docker*|*container*|*Dockerfile*) echo "docker" ;;
        *sql*|*database*|*postgres*|*mysql*) echo "sql" ;;
        *html*|*web*|*css*|*frontend*) echo "web" ;;
        *rust*|*cargo*|*.rs*) echo "rust" ;;
        *go*|*golang*|*.go*) echo "go" ;;
        *java*|*.java*) echo "java" ;;
        *ruby*|*.rb*) echo "ruby" ;;
        *) echo "python" ;; # Default to Python
    esac
}

get_file_extension() {
    local language="$1"
    case "$language" in
        python) echo "py" ;;
        javascript) echo "js" ;;
        bash) echo "sh" ;;
        docker) echo "Dockerfile" ;;
        sql) echo "sql" ;;
        web) echo "html" ;;
        rust) echo "rs" ;;
        go) echo "go" ;;
        java) echo "java" ;;
        ruby) echo "rb" ;;
        *) echo "txt" ;;
    esac
}

analyze_project() {
    local dir="${1:-.}"
    local analysis=""
    
    if [[ -d "$dir/.git" ]]; then
        analysis+="Git Repository: $(basename "$dir")\n"
        analysis+="Branch: $(git -C "$dir" branch --show-current 2>/dev/null || echo 'detached')\n"
        analysis+="Remote: $(git -C "$dir" remote get-url origin 2>/dev/null || echo 'none')\n"
    fi
    
    # Detect project type
    if [[ -f "$dir/package.json" ]]; then
        analysis+="Project Type: Node.js\n"
        if [[ -f "$dir/package-lock.json" ]]; then
            analysis+="Package Manager: npm\n"
        elif [[ -f "$dir/yarn.lock" ]]; then
            analysis+="Package Manager: yarn\n"
        fi
    elif [[ -f "$dir/requirements.txt" ]]; then
        analysis+="Project Type: Python\n"
    elif [[ -f "$dir/Cargo.toml" ]]; then
        analysis+="Project Type: Rust\n"
    elif [[ -f "$dir/go.mod" ]]; then
        analysis+="Project Type: Go\n"
    elif [[ -f "$dir/pom.xml" ]]; then
        analysis+="Project Type: Java\n"
    elif [[ -f "$dir/Gemfile" ]]; then
        analysis+="Project Type: Ruby\n"
    fi
    
    # Count files by type
    local py_files=$(find "$dir" -name "*.py" | head -5 | wc -l)
    local js_files=$(find "$dir" -name "*.js" | head -5 | wc -l)
    local md_files=$(find "$dir" -name "*.md" | head -3 | wc -l)
    
    [[ $py_files -gt 0 ]] && analysis+="Python files: $py_files\n"
    [[ $js_files -gt 0 ]] && analysis+="JavaScript files: $js_files\n"
    [[ $md_files -gt 0 ]] && analysis+="Documentation files: $md_files\n"
    
    echo -e "$analysis"
}

# --- CORE AGI WORKFLOW ---
run_agi_workflow() {
    local user_prompt="$*"
    
    # Generate project name from prompt
    local project_name=$(echo "$user_prompt" | tr ' ' '-' | tr -cd 'a-zA-Z0-9-' | cut -c1-32)
    local project_dir="$PROJECTS_DIR/$project_name"
    
    mkdir -p "$project_dir"
    cd "$project_dir"
    
    log_phase "🚀 AGI Workflow: $project_name"
    log_success "Project directory: $project_dir"
    
    # Detect language and setup
    local language=$(detect_language "$user_prompt")
    local ext=$(get_file_extension "$language")
    local main_file="main.$ext"
    local test_file="test_main.$ext"
    
    log_info "Language: $language | Main: $main_file | Test: $test_file"
    
    local code="" review="" tests="" status="IN_PROGRESS"
    
    for ((i=1; i<=MAX_AGENT_LOOPS; i++)); do
        log_phase "🔄 AGI Loop $i/$MAX_AGENT_LOOPS - Status: $status"
        
        # Phase 1: Code Generation
        log_ai_code "Generating code..."
        local coder_prompt="Write complete, functional code for: $user_prompt. Language: $language. Output ONLY the code with comments."
        code=$(run_ai_model "$AGENT_MODEL" "$coder_prompt")
        
        if [[ -z "$code" ]]; then
            log_error "Code generation failed"
            status="FAILED"
            break
        fi
        
        echo "$code" > "$main_file"
        log_success "Code written: $main_file"
        
        # Phase 2: Code Review
        log_ai_think "Reviewing code..."
        local reviewer_prompt="Review this code for errors, best practices, and improvements. Be constructive. Code:\n$code"
        review=$(run_ai_model "$REVIEWER_MODEL" "$reviewer_prompt")
        
        if echo "$review" | grep -qi "perfect\|excellent\|lgtm\|looks good"; then
            log_success "Code review passed"
        else
            log_warn "Code review suggestions: $review"
        fi
        
        # Phase 3: Test Generation
        log_ai_test "Generating tests..."
        local tester_prompt="Write comprehensive tests for this code. Language: $language. Output ONLY the test code. Code:\n$code"
        tests=$(run_ai_model "$TESTER_MODEL" "$tester_prompt")
        
        if [[ -n "$tests" ]]; then
            echo "$tests" > "$test_file"
            log_success "Tests written: $test_file"
        else
            log_warn "No tests generated"
        fi
        
        # Phase 4: Validation
        log_phase "✅ Validation"
        local validation_result=""
        
        case "$language" in
            python)
                if command -v python3 >/dev/null; then
                    if python3 -m py_compile "$main_file" 2>/dev/null; then
                        validation_result="Syntax validation passed"
                        if [[ -f "$test_file" ]]; then
                            if python3 "$test_file" 2>/dev/null; then
                                validation_result="All tests passed"
                                status="SUCCESS"
                            else
                                validation_result="Tests failed"
                            fi
                        fi
                    else
                        validation_result="Syntax errors found"
                    fi
                fi
                ;;
            bash)
                if bash -n "$main_file" 2>/dev/null; then
                    validation_result="Syntax validation passed"
                    status="SUCCESS"
                else
                    validation_result="Syntax errors found"
                fi
                ;;
            *)
                validation_result="Manual validation required for $language"
                status="NEEDS_MANUAL_REVIEW"
                ;;
        esac
        
        log_info "Validation: $validation_result"
        
        if [[ "$status" == "SUCCESS" ]]; then
            break
        elif [[ $i -eq $MAX_AGENT_LOOPS ]]; then
            status="MAX_ITERATIONS_REACHED"
        fi
    done
    
    # Save to memory
    add_memory "$user_prompt" "$project_name" "$language" "$code" "$review" "$tests" "$status"
    
    # Final output
    log_phase "🏁 AGI Workflow Complete"
    echo "Project: $project_name"
    echo "Status: $status"
    echo "Location: $project_dir"
    echo "Files: $main_file, $test_file"
    
    if [[ "$status" == "SUCCESS" ]]; then
        log_success "🎉 Project completed successfully!"
        echo "To run: cd $project_dir && $(get_run_command "$language" "$main_file")"
    else
        log_warn "⚠️  Project requires attention. Status: $status"
    fi
}

get_run_command() {
    local language="$1" file="$2"
    case "$language" in
        python) echo "python3 $file" ;;
        javascript) echo "node $file" ;;
        bash) echo "bash $file" ;;
        *) echo "# Check documentation for $language" ;;
    esac
}

# --- FILE MANAGEMENT ---
list_files() {
    local dir="${1:-.}" depth="${2:-1}"
    find "$dir" -maxdepth "$depth" -type f | head -20
}

search_files() {
    local pattern="$1" dir="${2:-.}"
    grep -r --include="*.py" --include="*.js" --include="*.sh" --include="*.md" \
         --include="*.txt" --include="*.html" --include="*.css" \
         "$pattern" "$dir" 2>/dev/null | head -10 || echo "No matches found"
}

# --- SYSTEM COMMANDS ---
system_info() {
    echo "=== AI DevOps Platform v14.0 ==="
    echo "AI Home: $AI_HOME"
    echo "Projects: $PROJECTS_DIR"
    echo "Models: Agent=$AGENT_MODEL, Reviewer=$REVIEWER_MODEL, Tester=$TESTER_MODEL"
    echo "Ollama: $(command -v ollama 2>/dev/null || echo 'Not found')"
    echo "Git: $(command -v git 2>/dev/null || echo 'Not found')"
    echo "Python: $(command -v python3 2>/dev/null || echo 'Not found')"
    echo "Node.js: $(command -v node 2>/dev/null || echo 'Not found')"
}

setup_system() {
    log_phase "🛠️  System Setup"
    
    # Install dependencies based on OS
    if command -v apt-get >/dev/null 2>&1; then
        log_info "Installing dependencies (Ubuntu/Debian)..."
        sudo apt-get update
        sudo apt-get install -y sqlite3 git curl python3 python3-pip nodejs npm
    elif command -v brew >/dev/null 2>&1; then
        log_info "Installing dependencies (macOS)..."
        brew install sqlite git curl python node
    elif command -v yum >/dev/null 2>&1; then
        log_info "Installing dependencies (RHEL/CentOS)..."
        sudo yum install -y sqlite git curl python3 nodejs
    else
        log_warn "Cannot detect package manager. Please install manually:"
        echo "Required: sqlite3, git, curl, python3, nodejs"
    fi
    
    # Set default configurations
    set_config agent_model "$DEFAULT_AGENT_MODEL"
    set_config reviewer_model "$DEFAULT_REVIEWER_MODEL"
    set_config tester_model "$DEFAULT_TESTER_MODEL"
    
    log_success "System setup complete"
}

# --- HELP SYSTEM ---
show_help() {
    cat << EOF
${GREEN}AI DevOps Platform v14.0 - The Ultimate Monolith${NC}

${CYAN}USAGE:${NC}
  ai serve                    # Start web UI server
  ai "your project idea"      # Run AGI workflow
  ai git <command> [path]     # Git operations
  ai files [path]             # List files
  ai find "pattern" [path]    # Search in files
  ai memory [search]          # Search memory
  ai config [view|set|get]    # Configuration
  ai setup-ssh "KEY"          # Setup SSH
  ai system-info              # System information
  ai --setup                  # Install dependencies

${CYAN}GIT COMMANDS:${NC}
  status    Show repository status
  pull      Pull latest changes  
  push      Push changes (with auto-commit)
  sync      Pull + push
  clone     Clone repository
  log       Show commit history

${CYAN}EXAMPLES:${NC}
  ai serve                    # Web interface
  ai "Create a Python Flask API with MongoDB"
  ai git status ~/projects
  ai find "TODO" ~/code
  ai setup-ssh "ssh-rsa AAAA..."
  ai config set agent_model llama3.1:8b

${CYAN}WEB UI:${NC} http://localhost:8080 (when running 'ai serve')
${CYAN}LOG FILE:${NC} $LOG_FILE
EOF
}

# --- MAIN DISPATCHER ---
main() {
    init_environment
    init_db
    load_config
    
    if [[ $# -eq 0 ]]; then
        show_help
        return 0
    fi
    
    case "$1" in
        serve)
            log_phase "Starting Web UI Server"
            # This is handled at the top of the script
            ;;
            
        --setup|-s)
            setup_system
            ;;
            
        system-info|info)
            system_info
            ;;
            
        git)
            shift
            git_operation "$@"
            ;;
            
        files|list)
            shift
            list_files "${1:-.}" "${2:-1}"
            ;;
            
        find|search|grep)
            shift
            search_files "${1:-TODO}" "${2:-.}"
            ;;
            
        memory)
            shift
            search_memory "${1:-}"
            ;;
            
        config)
            shift
            case "${1:-view}" in
                set) set_config "$2" "$3" ;;
                get) get_config "$2" ;;
                view) 
                    echo "=== Configuration ==="
                    sqlite3 -header -column "$CONFIG_DB" "SELECT key, value, updated FROM config ORDER BY key;"
                    ;;
                *) log_error "Usage: ai config [view|set|get]" ;;
            esac
            ;;
            
        setup-ssh)
            shift
            if [[ $# -lt 1 ]]; then
                log_error "SSH key required: ai setup-ssh 'SSH_PRIVATE_KEY'"
                return 1
            fi
            setup_ssh_key "$1"
            test_ssh
            ;;
            
        --help|-h)
            show_help
            ;;
            
        *)
            # Default: AGI workflow
            run_agi_workflow "$@"
            ;;
    esac
}

# --- ENTRY POINT ---
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi