#!/usr/bin/env bash
# ai.sh - AI DevOps Platform v14.0 - The Ultimate Monolith
# Single-file: Web UI + AGI Workflows + GitOps + Memory System

set -euo pipefail
IFS=$'\n\t'

# --- RUNTIME MODE DETECTION ---
if [[ "${1:-}" == "serve" ]]; then
    # Web Server Mode - Embedded Node.js
    # Check for Node.js before attempting to execute
    if ! command -v node &>/dev/null; then
        echo "ERROR: Node.js is required for 'serve' mode." >&2
        echo "Please install Node.js (e.g., 'sudo apt-get install nodejs npm')." >&2
        exit 1
    fi
    exec node --input-type=module - "$0" "$@" <<'NODE_EOF'
import http from 'http';
import { exec } from 'child_process';

const PORT = process.env.AI_PORT || 8080;
// The first argument passed from Bash is the path to the script itself.
const AI_SCRIPT_PATH = process.argv[2];

// Embedded HTML5 Web UI
const HTML_UI = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI DevOps Platform v14.0</title>
    <style>
        :root {
            --bg: #0f0f23; --text: #00ff00; --accent: #ff6ec7; --secondary: #6a67ce;
            --success: #00ff88; --warning: #ffaa00; --error: #ff4444; --panel: #1a1a2e;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Courier New', monospace;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            overflow-x: hidden;
        }
        .terminal {
            background: #000;
            border: 2px solid var(--accent);
            border-radius: 10px;
            padding: 20px;
            margin: 20px;
            height: 70vh;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
        }
        .input-line {
            display: flex;
            margin-top: 10px;
            border-top: 1px solid var(--secondary);
            padding-top: 10px;
        }
        .prompt { color: var(--accent); margin-right: 10px; }
        input {
            flex: 1;
            background: transparent;
            border: none;
            color: var(--text);
            font-family: inherit;
            font-size: inherit;
            outline: none;
        }
        .output { white-space: pre-wrap; }
        .success { color: var(--success); }
        .error { color: var(--error); }
        .warning { color: var(--warning); }
        .info { color: var(--secondary); }
    </style>
</head>
<body>
    <div style="text-align: center; padding: 20px; border-bottom: 2px solid var(--accent);">
        <h1>🤖 AI DevOps Platform v14.0</h1>
        <p>Full-stack AI agent with web interface</p>
    </div>

    <div class="terminal">
        <div id="output" class="output">
            <div class="info">🚀 AI Agent ready. Type commands below... (e.g., 'help')</div>
        </div>
        <div class="input-line">
            <span class="prompt">ai&gt;</span>
            <input type="text" id="commandInput" placeholder="Enter AI command...">
        </div>
    </div>

    <script>
        const output = document.getElementById('output');
        const input = document.getElementById('commandInput');

        function addOutput(text, className = '') {
            const div = document.createElement('div');
            div.className = className;
            div.textContent = text;
            output.appendChild(div);
            output.scrollTop = output.scrollHeight;
        }

        async function executeCommand(cmd) {
            addOutput(`ai> ${cmd}`, 'prompt');
            input.disabled = true;

            try {
                const response = await fetch('/api/command', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ command: cmd })
                });

                const data = await response.json();
                addOutput(data.output, data.success ? 'success' : 'error');
            } catch (err) {
                addOutput(`Error: ${err.message}`, 'error');
            } finally {
                input.disabled = false;
                input.focus();
            }
        }

        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const cmd = input.value.trim();
                if (cmd) {
                    executeCommand(cmd);
                    input.value = '';
                }
            }
        });

        input.focus();
    </script>
</body>
</html>
`;

const server = http.createServer(async (req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    if (req.url === '/' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(HTML_UI);
        return;
    }

    if (req.url === '/api/command' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => body += chunk.toString());
        req.on('end', () => {
            try {
                const { command } = JSON.parse(body);
                // Sanitize command to prevent complex shell injection.
                // For a production system, a more robust command validation/parsing is needed.
                const sanitizedCommand = command.replace(/(["'$`\\])/g,'\\$1');

                exec(`"${AI_SCRIPT_PATH}" ${sanitizedCommand}`, { timeout: 600000 }, (error, stdout, stderr) => { // 10 min timeout
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    if (error) {
                        res.end(JSON.stringify({
                            success: false,
                            output: `Error: ${error.message}\n${stderr}`
                        }));
                    } else {
                        res.end(JSON.stringify({
                            success: true,
                            output: stdout || 'Command executed successfully'
                        }));
                    }
                });
            } catch (err) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, output: 'Invalid request' }));
            }
        });
        return;
    }

    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ error: 'Not found' }));
});

server.listen(PORT, () => {
    console.log(`🌐 AI Web UI: http://localhost:${PORT}`);
    console.log(`💻 CLI Mode: ./ai.sh "your command"`);
    console.log(`📚 API Mode: curl -X POST http://localhost:${PORT}/api/command -d '{"command":"system-info"}'`);
});
NODE_EOF
fi

# --- BASH AGENT CORE (v14.0) ---

# --- CONFIGURATION ---
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"
SSH_DIR="$HOME/.ssh"
GIT_SSH_KEY="$SSH_DIR/id_ai_agent"
LOG_FILE="$AI_HOME/ai.log"

# AI Models with fallbacks
DEFAULT_MODEL="llama3.1:8b"
DEFAULT_AGENT_MODEL="${DEFAULT_AGENT_MODEL:-$DEFAULT_MODEL}"
DEFAULT_REVIEWER_MODEL="${DEFAULT_REVIEWER_MODEL:-$DEFAULT_MODEL}"
DEFAULT_TESTER_MODEL="${DEFAULT_TESTER_MODEL:-$DEFAULT_MODEL}"

# Runtime config
AGENT_MODEL=""
REVIEWER_MODEL=""
TESTER_MODEL=""
OLLAMA_BIN="$(command -v ollama || echo 'ollama')"
MEMORY_DB="$AI_HOME/memory.db"
CONFIG_DB="$AI_HOME/config.db"
MAX_AGENT_LOOPS=5

# --- ENHANCED COLOR SYSTEM ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'
ORANGE='\033[0;33m'; MAGENTA='\033[0;35m'; NC='\033[0m'

# Unicode icons
ICON_AI="🤖"; ICON_CODE="💻"; ICON_TEST="🧪"; ICON_GIT="📚"
ICON_SUCCESS="✅"; ICON_WARN="⚠️"; ICON_ERROR="❌"; ICON_INFO="ℹ️"

# --- ADVANCED LOGGING SYSTEM ---
LOG_LEVEL="${LOG_LEVEL:-INFO}"

log() {
    local level="$1" color="$2" icon="$3" message="$4"
    if [[ "$LOG_LEVEL" == "DEBUG" ]] || [[ "$level" != "DEBUG" && "$LOG_LEVEL" != "SILENT" ]]; then
        printf "${color}${icon} [%s] %s${NC}\n" "$(date '+%T')" "$message" >&2
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message" >> "$LOG_FILE"
    fi
}

log_debug() { log "DEBUG" "$PURPLE" "🔍" "$*"; }
log_info() { log "INFO" "$BLUE" "$ICON_INFO" "$*"; }
log_success() { log "SUCCESS" "$GREEN" "$ICON_SUCCESS" "$*"; }
log_warn() { log "WARN" "$YELLOW" "$ICON_WARN" "$*"; }
log_error() { log "ERROR" "$RED" "$ICON_ERROR" "$*"; exit 1; }

log_phase() {
    local phase="$1"
    echo -e "\n${MAGENTA}╔══════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${MAGENTA}║ 🚀 $phase${NC}"
    echo -e "${MAGENTA}╚══════════════════════════════════════════════════════════════════╝${NC}"
}

log_ai_think() { log "THINK" "$CYAN" "🧠" "$*"; }
log_ai_code() { log "CODE" "$GREEN" "$ICON_CODE" "$*"; }
log_ai_test() { log "TEST" "$YELLOW" "$ICON_TEST" "$*"; }

# --- INITIALIZATION ---
init_environment() {
    mkdir -p "$AI_HOME" "$PROJECTS_DIR" "$SSH_DIR"
    chmod 700 "$SSH_DIR" 2>/dev/null || true
    touch "$LOG_FILE"; chmod 600 "$LOG_FILE"
}

# --- DATABASE SYSTEM ---
init_db() {
    sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories (id INTEGER PRIMARY KEY, timestamp DATETIME, prompt TEXT, project TEXT, status TEXT, hash TEXT UNIQUE);" 2>/dev/null || true
    sqlite3 "$CONFIG_DB" "CREATE TABLE IF NOT EXISTS config (key TEXT PRIMARY KEY, value TEXT);" 2>/dev/null || true
}
sqlite_escape() { echo "$1" | sed "s/'/''/g"; }

# --- CONFIG MANAGEMENT ---
set_config() { sqlite3 "$CONFIG_DB" "INSERT OR REPLACE INTO config (key, value) VALUES ('$(sqlite_escape "$1")', '$(sqlite_escape "$2")');"; log_success "Config set: $1 = $2"; }
get_config() { sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key = '$1';" 2>/dev/null; }
load_config() {
    AGENT_MODEL=$(get_config agent_model || echo "$DEFAULT_AGENT_MODEL")
    REVIEWER_MODEL=$(get_config reviewer_model || echo "$DEFAULT_REVIEWER_MODEL")
    TESTER_MODEL=$(get_config tester_model || echo "$DEFAULT_TESTER_MODEL")
}

# --- MEMORY SYSTEM ---
add_memory() {
    local prompt="$1" project="$2" status="$3"
    local hash=$(echo -n "$prompt$project" | sha256sum | cut -c1